{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\axm\\\\Documents\\\\GitHub\\\\advice-generator\\\\src\\\\components\\\\MainContent.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport diceIcon from '../assets/icons/icon-dice.svg';\nimport desktopDivider from '../assets/icons/pattern-divider-desktop.svg';\nimport mobileDivider from '../assets/icons/pattern-divider-mobile.svg';\nimport '../styles/MainContent.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MainContent() {\n  _s();\n  const [advice, setAdvice] = useState('');\n  const [adviceId, setAdviceId] = useState('');\n  const [loading, setLoading] = useState(false); // Состояние загрузки\n\n  // Fetch advice from API\n  const fetchAdvice = async () => {\n    setLoading(true); // Устанавливаем состояние загрузки\n    try {\n      const response = await fetch('https://api.adviceslip.com/advice');\n      const data = await response.json();\n      setAdvice(data.slip.advice);\n      setAdviceId(data.slip.id);\n    } catch (error) {\n      console.error('Error fetching advice:', error);\n      setAdvice('Oops! Something went wrong.');\n      setAdviceId('???');\n    } finally {\n      setLoading(false); // Сбрасываем состояние загрузки\n    }\n  };\n\n  // Fetch advice on first render\n  useEffect(() => {\n    fetchAdvice();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    className: \"card\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"advice-id\",\n      children: [\"ADVICE #\", loading ? '...' : adviceId]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"advice-text\",\n      children: loading ? 'Loading...' : advice\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"picture\", {\n      className: \"divider\",\n      children: [/*#__PURE__*/_jsxDEV(\"source\", {\n        srcSet: mobileDivider,\n        media: \"(max-width: 375px)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: desktopDivider,\n        alt: \"Divider\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"dice-button\",\n      onClick: fetchAdvice,\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: diceIcon,\n        alt: \"Generate Advice\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 9\n  }, this);\n}\n_s(MainContent, \"XRD7TraM8Lj+aSIP8/IojkwD3z4=\");\n_c = MainContent;\nexport default MainContent;\nvar _c;\n$RefreshReg$(_c, \"MainContent\");","map":{"version":3,"names":["React","useState","useEffect","diceIcon","desktopDivider","mobileDivider","jsxDEV","_jsxDEV","MainContent","_s","advice","setAdvice","adviceId","setAdviceId","loading","setLoading","fetchAdvice","response","fetch","data","json","slip","id","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","srcSet","media","src","alt","onClick","_c","$RefreshReg$"],"sources":["C:/Users/axm/Documents/GitHub/advice-generator/src/components/MainContent.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport diceIcon from '../assets/icons/icon-dice.svg';\r\nimport desktopDivider from '../assets/icons/pattern-divider-desktop.svg';\r\nimport mobileDivider from '../assets/icons/pattern-divider-mobile.svg';\r\nimport '../styles/MainContent.css';\r\n\r\nfunction MainContent() {\r\n    const [advice, setAdvice] = useState('');\r\n    const [adviceId, setAdviceId] = useState('');\r\n    const [loading, setLoading] = useState(false); // Состояние загрузки\r\n\r\n    // Fetch advice from API\r\n    const fetchAdvice = async () => {\r\n        setLoading(true); // Устанавливаем состояние загрузки\r\n        try {\r\n            const response = await fetch('https://api.adviceslip.com/advice');\r\n            const data = await response.json();\r\n            setAdvice(data.slip.advice);\r\n            setAdviceId(data.slip.id);\r\n        } catch (error) {\r\n            console.error('Error fetching advice:', error);\r\n            setAdvice('Oops! Something went wrong.');\r\n            setAdviceId('???');\r\n        } finally {\r\n            setLoading(false); // Сбрасываем состояние загрузки\r\n        }\r\n    };\r\n\r\n    // Fetch advice on first render\r\n    useEffect(() => {\r\n        fetchAdvice();\r\n    }, []);\r\n\r\n    return (\r\n        <main className=\"card\">\r\n            <h1 className=\"advice-id\">ADVICE #{loading ? '...' : adviceId}</h1>\r\n            <p className=\"advice-text\">{loading ? 'Loading...' : advice}</p>\r\n            <picture className=\"divider\">\r\n                <source srcSet={mobileDivider} media=\"(max-width: 375px)\" />\r\n                <img src={desktopDivider} alt=\"Divider\" />\r\n            </picture>\r\n            <button className=\"dice-button\" onClick={fetchAdvice}>\r\n                <img src={diceIcon} alt=\"Generate Advice\" />\r\n            </button>\r\n        </main>\r\n    );\r\n}\r\n\r\nexport default MainContent;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}